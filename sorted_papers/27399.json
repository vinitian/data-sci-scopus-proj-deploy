{
    "eid": "2-s2.0-85089216629",
    "title": "BoundWarden: Thread-enforced spatial memory safety through compile-time transformations",
    "cover-date": "2020-10-15",
    "subject-areas": [
        {
            "@_fa": "true",
            "$": "Software",
            "@code": "1712",
            "@abbrev": "COMP"
        }
    ],
    "keywords": [
        "Bound checking thread",
        "Buffer overflows",
        "Compile-time transformation",
        "Concurrent monitoring",
        "Spatial memory safety"
    ],
    "authors": [
        "Smith Dhumbumroong",
        "Krerk Piromsopa"
    ],
    "citedby-count": 2,
    "ref-count": 53,
    "ref-list": [
        "Computer security technology planning study",
        "The morris worm: a fifteen-year perspective",
        "CVE details",
        "Common vulnerabilities and exposures (cve)",
        "Sok: eternal war in memory",
        "Cyclone: a safe dialect of c",
        "Checked c: making c safe by extension",
        "Low-fat pointers: compact encoding and efficient gate-level implementation of fat pointers for spatial safety and capability-based security",
        "Architectural support for software-defined metadata processing",
        "LLVM: a compilation framework for lifelong program analysis & transformation",
        "Smashing the stack for fun and profit",
        "Return-oriented programming: systems, languages, and applications",
        "On the expressiveness of return-into-libc attacks",
        "Return-oriented programming without returns",
        "The geometry of innocent flesh on the bone: return-into-libc without function calls (on the x86)",
        "Jump-oriented programming: a new class of code-reuse attack",
        "Cruiser: concurrent heap buffer overflow monitoring using lock-free data structures",
        "Cets: compiler enforced temporal safety for c",
        "How to shadow every byte of memory used by a program",
        "Tag-protector: an effective and dynamic detection of out-of-bound memory accesses",
        "Ripe: runtime intrusion prevention evaluator",
        "Nist software assurance reference dataset project",
        "Test suite #89: a taxonomy of buffer overflows",
        "A taxonomy of buffer overflows for evaluating static and dynamic software testing tools",
        "Supporting dynamic data structures on distributed-memory machines",
        "Safedrive: safe and recoverable extensions using language-based techniques",
        "Ccured: type-safe retrofitting of legacy code",
        "Ccured: type-safe retrofitting of legacy code",
        "Backwards-compatible array bounds checking for c with very low overhead",
        "Safecode: a platform for developing reliable software in unsafe languages",
        "Softbound: highly compatible and complete spatial memory safety for c",
        "Addresssanitizer: a fast address sanity checker",
        "Stackguard: automatic adaptive detection and prevention of buffer-overflow attacks",
        "Survey of protections from buffer-overflow attacks",
        "Extensions to the c programming language for enhanced fault detection",
        "Adding run-time checking to the portable c compiler",
        "Error checking with pointer variables",
        "Backwards-compatible bounds checking for arrays and pointers in c programs",
        "A practical dynamic buffer overflow detector",
        "Automatic pool allocation: improving performance by controlling data structure layout in the heap",
        "Baggy bounds checking: an efficient and backwards-compatible defense against out-of-bounds errors",
        "N-variant systems: a secretless framework for security through diversity",
        "Multi-variant program execution: using multi-core systems to defuse buffer-overflow vulnerabilities",
        "Orchestra: intrusion detection using parallel execution and monitoring of program variants in user-space",
        "Cloning your gadgets: complete rop attack immunity with multi-variant execution",
        "Taming parallelism in a multi-variant execution environment",
        "Exterminator: automatically correcting memory errors with high probability",
        "Diehard: probabilistic memory safety for unsafe languages",
        "Kruiser: semi-synchronized non-blocking concurrent kernel heap buffer overflow monitoring",
        "Clam: a static analyzer based on crab for llvm-based languages",
        "Klee: unassisted and automatic generation of high-coverage tests for complex systems programs"
    ],
    "affiliation": {
        "affiliation-city": "Bangkok",
        "@id": "60028190",
        "affilname": "Chulalongkorn University",
        "@href": "https://api.elsevier.com/content/affiliation/affiliation_id/60028190",
        "affiliation-country": "Thailand"
    },
    "funding": []
}